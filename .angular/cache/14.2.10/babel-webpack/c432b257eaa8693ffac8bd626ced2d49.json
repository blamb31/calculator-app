{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { Stack } from './shared/classes/Stack.class';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./history/history.component\";\nimport * as i2 from \"./keypad/keypad.component\";\nimport * as i3 from \"./display/display.component\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor() {\n      this.numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '(-)'];\n      this.operators = ['C', '/', '*', '-', '+', '=', 'enter'];\n      this.display = new BehaviorSubject('0');\n      this.selectedOperator = new BehaviorSubject('');\n      this.operand1 = new BehaviorSubject(null);\n      this.operand2 = new BehaviorSubject(null);\n      this.history = new BehaviorSubject(new Stack());\n      this.lastExpression = new BehaviorSubject('');\n      this.justCalculated = false;\n      this.clearDisp = false;\n    }\n\n    onKeyDown(event) {\n      var _a;\n\n      const key = (_a = event.key) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n      let indexOfKey = null;\n      indexOfKey = this.numbers.indexOf(key);\n\n      if (indexOfKey !== -1) {\n        this.showNumber(this.numbers[indexOfKey]);\n      } else {\n        indexOfKey = this.operators.indexOf(key);\n\n        if (indexOfKey !== -1) {\n          this.operate(key);\n        }\n      }\n    }\n\n    showNumber(num) {\n      if (this.justCalculated) {\n        this.clearCalculator();\n      }\n\n      if (this.clearDisp) {\n        this.display.next('0');\n        this.clearDisp = false;\n      }\n\n      if (this.display.value === '0' && num !== '(-)') {\n        this.display.next('');\n      }\n\n      if (num === '.' && this.display.value.includes('.')) {\n        return;\n      } else if (num === '(-)' && this.display.value !== '0') {\n        if (this.display.value.includes('-')) {\n          this.display.next(this.display.value.slice(1));\n          this.operand1.next(Number(this.display.value));\n        } else {\n          this.display.next('-' + this.display.value);\n          this.operand1.next(Number(this.display.value));\n        }\n      } else if (num !== '(-)') {\n        this.display.next(this.display.value + String(num));\n        this.justCalculated = false;\n        this.operand1.next(Number(this.display.value));\n        console.log({\n          num,\n          op1: this.operand1.value,\n          disp: this.display.value\n        });\n      }\n    }\n\n    operate(operator) {\n      //Clear\n      if (operator === 'C') {\n        this.clearCalculator();\n        return;\n      } //Equals\n\n\n      if (operator === '=' || operator === 'enter') {\n        if (this.selectedOperator.value === '=' || this.selectedOperator.value === 'enter') {\n          return;\n        }\n\n        if ((this.operand1.value === 0 || this.operand1.value) && (this.operand2.value === 0 || this.operand2.value)) {\n          this.calculate(this.operand1.value, this.operand2.value, this.selectedOperator.value);\n          this.selectedOperator.next(null);\n          this.justCalculated = true;\n          this.operand1.next(null);\n        } else {\n          return;\n        }\n      } else if (this.selectedOperator.value && this.operand1.value && this.operand2.value) {\n        this.calculate(this.operand1.value, this.operand2.value, this.selectedOperator.value);\n        this.operand1.next(null);\n        this.selectedOperator.next(operator);\n        this.justCalculated = false;\n      } else if (operator !== '=' && operator !== 'enter') {\n        //Dont calc yet\n        this.selectedOperator.next(operator);\n        this.clearDisp = true;\n        this.justCalculated = false;\n        this.operand2.next(Number(this.display.value));\n        this.operand1.next(null);\n      }\n    }\n\n    clearCalculator() {\n      this.display.next('0');\n      this.operand1.next(null);\n      this.operand2.next(null);\n      this.justCalculated = false;\n      this.selectedOperator.next(null);\n      this.lastExpression.next('');\n    }\n\n    calculate(o1, o2, operator, setHistory = true) {\n      let res;\n\n      if (operator === '+') {\n        res = o2 + o1;\n      }\n\n      if (operator === '-') {\n        res = o2 - o1;\n      }\n\n      if (operator === '*') {\n        res = o2 * o1;\n      }\n\n      if (operator === '/') {\n        res = o2 / o1;\n      }\n\n      this.lastExpression.next(`${o2} ${operator} ${o1}`);\n\n      if (setHistory) {\n        this.setHistory(this.lastExpression.value);\n      }\n\n      this.display.next(String(res));\n      this.operand2.next(res);\n      this.clearDisp = true;\n      this.justCalculated = true;\n      this.operand1.next(res);\n    }\n\n    setHistory(item) {\n      this.history.value.push(item);\n    }\n\n    handleHistory(e) {\n      this.clearCalculator();\n      this.calculate(Number(e[2]), Number(e[0]), e[1], false);\n      this.selectedOperator.next(null); // this.justCalculated = true;\n\n      this.operand1.next(null);\n    }\n\n    handleNumberClick(num) {\n      this.showNumber(num);\n    }\n\n    handleOperatorClick(operator) {\n      this.operate(operator);\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"my-app\"]],\n    hostBindings: function AppComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function AppComponent_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 7,\n    vars: 7,\n    consts: [[1, \"calc-body\"], [1, \"dropdowns\"], [1, \"dropdowns\", 3, \"history\", \"calculateHistory\"], [1, \"area-fill\", 3, \"lastExpression\", \"display\", \"selectedOperator\"], [1, \"area-fill\", \"buttons-area\", 3, \"numbers\", \"operators\", \"numberClicked\", \"operatorClicked\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"app-history\", 2);\n        i0.ɵɵlistener(\"calculateHistory\", function AppComponent_Template_app_history_calculateHistory_2_listener($event) {\n          return ctx.handleHistory($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementContainerStart(3);\n        i0.ɵɵelement(4, \"app-display\", 3);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementStart(5, \"app-keypad\", 4);\n        i0.ɵɵlistener(\"numberClicked\", function AppComponent_Template_app_keypad_numberClicked_5_listener($event) {\n          return ctx.handleNumberClick($event);\n        })(\"operatorClicked\", function AppComponent_Template_app_keypad_operatorClicked_5_listener($event) {\n          return ctx.handleOperatorClick($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtext(6);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"history\", ctx.history.value);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"lastExpression\", ctx.lastExpression.value)(\"display\", ctx.display.value)(\"selectedOperator\", ctx.selectedOperator.value);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"numbers\", ctx.numbers)(\"operators\", ctx.operators);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\"\\n\", ctx.selectedOperator.value, \"\\n\");\n      }\n    },\n    dependencies: [i1.HistoryComponent, i2.KeypadComponent, i3.DisplayComponent],\n    styles: [\"*[_ngcontent-%COMP%]{font-family:Lato;margin:0;padding:0;box-sizing:border-box}.calc-body[_ngcontent-%COMP%]{width:400px;height:600px;background:#c9c9c9;border-radius:15px;padding:1rem;display:flex;flex-direction:column;gap:.75rem}.area-fill[_ngcontent-%COMP%]{border:2px solid #8d8d8d;background:#ebebeb;border-radius:15px;padding:.5rem}.buttons-area[_ngcontent-%COMP%]{height:80%;width:100%;display:flex;flex-wrap:wrap}.dropdowns[_ngcontent-%COMP%]{width:100%;display:flex;justify-content:flex-end}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}